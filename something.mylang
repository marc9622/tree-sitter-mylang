
// Hello
/* Hello */

def a = 10;
def a = 10.00;
def a = "";
def a = A;
def a = a;

def a = a();
def a: () -> Void { return }
def a() -> Void { return }

let a = a + a;
let a = a - a;
let a = a * a;
let a = a / a;
let a = a % a;
let a = ! a;
let a = & a;
let a = a ^;
let a: ?A = a;
let a = a :: A;
let a = a ..= a;
let a = a =.. a;
let a = a ..< a;
let a = a <.. a;
let a = a ..> a;
let a = a >.. a;
let a {
    a += a;
    a -= a;
    a *= a;
    a /= a;
    if a == a: return;
    if a != a: return;
    if a <= a: return;
    if a >= a: return;
    if a < a: return;
    if a > a: return;
    if a <> a: return;
}
let a: () -> A;
let a = a . a;
let a: A = a;
let a: []A = a;
let a: () -> || { break a }

let a = true;
let a = false;
let a = uninit;
let a = null;
let a = void;
let a = ();

import A with A
alias A = A;
newtype A = A;
struct A {}
union A {}
enum A: A {}
trait A {}
impl A for A { pub virt a() -> Void; }

extern a;
intern a;
macro a;
def a {
    if true and (false or true): return;
    switch true
    case true: return
    default: return;
    for a at a range 0..=0 in a: return;
    return;
    break;
    continue;
    defer a();
}
